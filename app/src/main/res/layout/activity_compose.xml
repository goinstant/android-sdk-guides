<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:orientation="vertical"
              android:layout_width="match_parent"
              android:layout_height="match_parent"
              android:paddingLeft="@dimen/activity_horizontal_margin"
              android:paddingRight="@dimen/activity_horizontal_margin"
              android:paddingTop="@dimen/activity_vertical_margin"
              android:paddingBottom="@dimen/activity_vertical_margin">

    <EditText
        android:hint="@string/hint_email"
        android:inputType="textEmailAddress"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"/>

    <EditText
        android:hint="@string/hint_subject"
        android:inputType="text"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"/>

    <!--
    The most direct way to make a masked field is to use the SOS masked equivalent of an
    existing Android field. Currently, the following maskable fields are available:
        com.salesforce.android.sos.mask.EditText,
        com.salesforce.android.sos.mask.AutoCompleteTextView,
        com.salesforce.android.sos.mask.MultiAutoCompleteTextView,
        com.salesforce.android.sos.mask.TextView,
        com.salesforce.android.sos.mask.View

    The first three of these masked-field types are editable and exposing and hiding of those
    fields is handled automatically whenever the field has focus. It is possible to expose or
    hide any of the masked fields programmatically.

    Additionally, the actual drawable that acts as the mask (a gray rectangle by default) can
    be customized with an application-defined drawable asset.
    -->
    <com.salesforce.android.sos.mask.EditText
        android:hint="@string/hint_message"
        android:inputType="textMultiLine"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"/>
</LinearLayout>